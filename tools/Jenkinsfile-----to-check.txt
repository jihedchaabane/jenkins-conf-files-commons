pipeline {
    agent any
    tools {
        maven 'Maven' // Nom de l'installation Maven dans Jenkins
        jdk 'JDK'     // Nom de l'installation JDK dans Jenkins
    }
    environment {
        DOCKER_REGISTRY = 'docker.io' 					// Remplacez par votre registre (ex. Docker Hub)
        DOCKER_CREDENTIALS_ID = 'docker-credentials' 	// ID des credentials Docker dans Jenkins
        IMAGE_VERSION = '1.0.0' 						// Version des images Docker
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/votre-repo.git', branch: 'main'
            }
        }
        stage('Build Maven Modules') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Build Docker Image - Eureka') {
            steps {
                dir('eureka') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/eureka:${IMAGE_VERSION} .'
                }
            }
        }
        stage('Build Docker Image - Spring Boot Admin') {
            steps {
                dir('springboot-admin') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/springboot-admin:${IMAGE_VERSION} .'
                }
            }
        }
        stage('Build Docker Image - Microservice1') {
            steps {
                dir('microservice1') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/microservice1:${IMAGE_VERSION} .'
                }
            }
        }
        stage('Build Docker Image - Microservice2') {
            steps {
                dir('microservice2') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/microservice2:${IMAGE_VERSION} .'
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin ${DOCKER_REGISTRY}'
                    sh 'docker push ${DOCKER_REGISTRY}/eureka:${IMAGE_VERSION}'
                    sh 'docker push ${DOCKER_REGISTRY}/springboot-admin:${IMAGE_VERSION}'
                    sh 'docker push ${DOCKER_REGISTRY}/microservice1:${IMAGE_VERSION}'
                    sh 'docker push ${DOCKER_REGISTRY}/microservice2:${IMAGE_VERSION}'
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            sh 'docker logout'
        }
    }
}